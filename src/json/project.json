{
  "openapi": "3.0.2",
  "info": {
    "title": "OpenProtein",
    "description": "\nOpenProtein API helps you engineer better proteins ðŸš€\n\n# Getting Started\n\nThese endpoints provide all the functionality of the user app for your programmatic needs.\nBefore starting here, you might want to read our `/docs` page to understand how to log in from your IDE, and how our asynchronous job system works. \n\n## Other user materials \n\nThere is a comprehensive [User Guide](https://docs.openprotein.ai/) with descriptions of each workflow.\n\nWe also provide demos of OP modelss:\n* [Making predictions based on measured properties](https://docs.openprotein.ai/mutagenesis-page.html)\n* More coming soon!\n\nLastly, we have [demo datasets](https://docs.openprotein.ai/demo-datasets-page.html) that can be used to gain familiarity with our workflows. \n\nWe encourage you to peruse these resources before starting your workflows for the optimal experience. \n\n# Endpoints\n\n### Assaydata \n\nEndpoints to upload your dataset to OpenProtein's engineering platform for `train`, `predict` and `evaluate` tasks. See the [User Guide](https://docs.openprotein.ai/dataset-page.html).\n\nFormat your data as 2 column CSV:\n* The full sequence of each variant (mutation codes are also accepted)\n* 1+ columns with your measured properties (missing values are acceptable)\n\n### Train\n\nEndpoints to train a model(s) on your measured properties to enable predictions for new sequences! See the [User Guide](https://docs.openprotein.ai/models-page.html). \n\nThese workflows will additionally perform [cross-validation](https://docs.openprotein.ai/cross-validation-page.html) on your models to estimate uncertainty.\n\nNote: A trained model is required before you can utilize `predict` or `design` endpoints.\n\n### Predict \n\nEndpoints for predicting properties on arbitary sequences with your OpenProtein trained models! Please see the [User Guide](https://docs.openprotein.ai/predictions-page.html).\n\nYou can make predictions for single sequences as well as single mutant variants of the sequence.\n\nNote that you must first train a model with the `train` endpoints (see above). \n\n### Design \n\nEndpoints to design new sequences based on your stated objectives and our genetic algorithm! See the [User Guide](https://docs.openprotein.ai/design-page.html).\n\nNote that these endpoints require you to first upload your datasets via `assaydata` endpoints. \n\nYou may also require trained models from the `train` endpoints for full utility.\n\n\n## Contact Us\n\n\n",
    "version": "0.1.0",
    "contact": {
      "name": "OpenProtein",
      "url": "https://www.openprotein.ai/",
      "email": "support@ne47.bio"
    }
  },
  "paths": {
    "/api/v1/assaydata": {
      "get": {
        "tags": ["assaydata"],
        "summary": "List Assay Metadata",
        "description": "List of metadata of assays owned by user.\n\n---\n\nArgs:\n\n    project_uuid (Optional[str], optional): project id to limit results to this project only. Defaults to None.\n\nReturns:\n\n    josn: assay metadata",
        "operationId": "list_assay_metadata_assaydata_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Project Uuid",
              "type": "string"
            },
            "name": "project_uuid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json5": {
                "schema": {
                  "title": "Response List Assay Metadata Assaydata Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssayMetadata"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBase": []
          }
        ]
      },
      "post": {
        "tags": ["assaydata"],
        "summary": "Upload data for use with our platform",
        "description": "Upload assay data for use with core OpenProtein tools. \n\nFormat your data as a 2+ column CSV:\n* The full sequence of each variant (mutation codes are also accepted)\n* 1+ columns with your measured properties (missing values are acceptable)\n\n---\n\nArgs:\n\n    assay_data (UploadFile): File to upload to OpenProtein.\n    assay_name (str, optional): assay name.\n    assay_description (str, optional): description.\n    project_uuid (Optional[str], optional): unique id for project.\n\nRaises:\n\n    HTTPException: invlaid formats. \n\nReturns:\n\n    josn: assay metadata",
        "operationId": "create_assay_data_assaydata_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Parent Sequence",
              "type": "string"
            },
            "name": "parent_sequence",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Project Uuid",
              "type": "string"
            },
            "name": "project_uuid",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Error Limits",
              "type": "integer",
              "default": 5
            },
            "name": "error_limits",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_assay_data_assaydata_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/AssayMetadata"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBase": []
          }
        ]
      }
    },
    "/api/v1/workflow/train": {
      "post": {
        "tags": ["train"],
        "summary": "Create Training Job",
        "description": "Create a job to train a ML model for downstream use.\n\nRequires an assay_id (from dataset endpoints) as well as measurement names to train on. See the schema below.\n\nThe model id returned from this endpoint will be used in predict and design workflows to retrieve this specific model for other uses.\n\n---\n\nArgs:\n\n    train_job_in (schemas.TrainJobCreate): training schema\n    force_preprocess (bool, optional): _description_. Defaults to False.\n\nRaises:\n\n    HTTPException: job cannot be created\n\nReturns:\n\n    Job: job details",
        "operationId": "create_training_job_workflow_train_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Force Preprocess",
              "type": "boolean",
              "default": false
            },
            "name": "force_preprocess",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TrainJobCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBase": []
          }
        ]
      }
    },
    "/api/v1/workflow/train/br": {
      "post": {
        "tags": ["train"],
        "summary": "Create Training Job Using Bayesian Regression",
        "description": "Create a job to train a ML model for downstream use.\n\nRequires an assay_id (from dataset endpoints) as well as measurement names to train on. See the schema below.\n\nThe model id returned from this endpoint will be used in predict and design workflows to retrieve this specific model for other uses.\n\n---\n\nArgs:\n\n    train_job_in (schemas.TrainJobCreate): training schema\n    force_preprocess (bool, optional): _description_. Defaults to False.\n\nRaises:\n\n    HTTPException: job cannot be created\n\nReturns:\n\n    Job: job details",
        "operationId": "create_training_job_workflow_train_br_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Force Preprocess",
              "type": "boolean",
              "default": false
            },
            "name": "force_preprocess",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TrainJobCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBase": []
          }
        ]
      }
    },
    "/api/v1/workflow/train/gp": {
      "post": {
        "tags": ["train"],
        "summary": "Create Training Job Using Gaussian Process",
        "description": "Create a job to train a ML model for downstream use.\n\nRequires an assay_id (from dataset endpoints) as well as measurement names to train on. See the schema below.\n\nThe model id returned from this endpoint will be used in predict and design workflows to retrieve this specific model for other uses.\n\n---\n\nArgs:\n\n    train_job_in (schemas.TrainJobCreate): training schema\n    force_preprocess (bool, optional): _description_. Defaults to False.\n\nRaises:\n\n    HTTPException: job cannot be created\n\nReturns:\n\n    Job: job details",
        "operationId": "create_training_job_workflow_train_gp_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Force Preprocess",
              "type": "boolean",
              "default": false
            },
            "name": "force_preprocess",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TrainJobCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBase": []
          }
        ]
      }
    },
    "/api/v1/workflow/train/{job_id}": {
      "get": {
        "tags": ["train"],
        "summary": "Get training job metadata",
        "description": "Get results of training job. For example loss at each step.\n\n---\n\nArgs:\n\n    job_id (str): job ID returned from POST train/gp or train/br event\n\nRaises:\n\n    HTTPException: no such job\n\nReturns:\n\n    training results: results of training job, inc loss.",
        "operationId": "get_train_workflow_train__job_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Job Id",
              "type": "string"
            },
            "name": "job_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/TrainJob"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBase": []
          }
        ]
      }
    },
    "/api/v1/workflow/design/genetic-algorithm": {
      "post": {
        "tags": ["design"],
        "summary": "Use our genetic algo to design new sequences",
        "description": "Create a design job. \n\nExpects a job schema containing an assay_id (from your POST /assaydata flow) and a criteria; which can be a nested list of properties and targets defining the objective function of the design algorithm. \n\nThe outer list defines an OR condition whereas the inner list defines an AND condition. E.g. the corresponding objective for [[A>1, B>1], C<5] is (A>1 AND B>1) OR C<5. \nTwo types of objectives are supported:\n\n\n* model: find sequences that maximize the probability that a property is less than, equal to, or greater than a given value, where the probability is predicted by a previously trained model\n* n_mutations: find sequences that minimize the number of mutations relative to a set of sequences. Useful for exploring the trade-off between number of mutations and fitness.\n\nSee the User Guide or api schema (below). \n\n---\n\nArgs:\n\n    design_job_in (schemas.DesignJobCreate): design schema \n\nRaises:\n\n    HTTPException: invalid assay, invalid criteria\n\nReturns:\n\n    models.Job: job details",
        "operationId": "post_genetic_algorithm_design_workflow_design_genetic_algorithm_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GeneticAlgorithmJobCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBase": []
          }
        ]
      }
    },
    "/api/v1/workflow/design/{job_id}": {
      "get": {
        "tags": ["design"],
        "summary": "Get Design",
        "description": "Get results from design job. \n\nThis endpoint will be used after a successful POST request. \n\n---\n\nArgs:\n\n    job_id (str): job id created at POST /design event. \n    page_size (int): entries per page\n    page_offset (int): number of entries to offset\n\nRaises:\n\n    HTTPException: no such job exists\n\nReturns:\n\n    list: list of job results inc sequences and scores",
        "operationId": "get_design_workflow_design__job_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Job Id",
              "type": "string"
            },
            "name": "job_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "default": 1000
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Page Offset",
              "minimum": 0,
              "type": "integer",
              "default": 0
            },
            "name": "page_offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/DesignJob"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBase": []
          }
        ]
      }
    },
    "/api/v1/workflow/predict": {
      "post": {
        "tags": ["predict"],
        "summary": "Create predict job on your sequences",
        "description": "Starts a  prediction job for sequences using OpenProtein trained models. \n\nNote that this endpoint requires you to have a trained model (and associated ID) from a completed POST /train event.\nSimply supply the job_id from this train job to use that model in this predict task. \n\nNote: if `train_job_id` is given, will perform prediction using all\nmodels produced in the train job.\n\n---\n\nArgs:\n\n    predict_job_in (schemas.PredictJobCreate): Either a list of `model_id`s OR a `train_job_id`\n\nRaises:\n\n    HTTPException (40x): Job not found\n\nReturns:\n\n    Job: Job Details",
        "operationId": "create_predict_job_workflow_predict_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "default": 1000
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Page Offset",
              "minimum": 0,
              "type": "integer",
              "default": 0
            },
            "name": "page_offset",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PredictJobCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Job result available",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/PredictJob"
                }
              },
              "application/json": {
                "example": {
                  "job_type": "/workflow/predict",
                  "page_size": 1000,
                  "page_offset": 0,
                  "num_rows": 3,
                  "result": [
                    {
                      "sequence": "ACRKDINSANDTVGVAVVNYKMPRLHTAAEVLDNARKIAEMIVGMKQGLPGMDLVVFPEYSLQGIMYDPAEMMETAVAIPGEETEIFSRACRKANVWGVFSLTGERHEEHPRKAPYNTLVLIDNNGEIVQKYRKIIPWCPIEGWYPGGQTYVSEGPKGMKISLIICDDGNYPEIWRDCAMKGAELIVRCQGYMYPAKDQQVMMAKAMAWANNCYVAVANAAGFDGVYSYFGHSAIIGFDGRTLGECGEEEMGIQYAQLSLSQIRDARANDQSQNHLFKILHRGYSGLQASGDGDRGLAECPFEFYRTWVTDAEKARENVERLTRSTTGVAQCPVGRLPYEGLEKEA",
                      "predictions": {
                        "isobutyramide_normalized_fitness": {
                          "y_mu": -0.5002061128616333,
                          "y_var": 0.09879426658153534
                        }
                      }
                    },
                    {
                      "sequence": "BCRKDINSANDTVGVAVVNYKMPRLHTAAEVLDNARKIAEMIVGMKQGLPGMDLVVFPEYSLQGIMYDPAEMMETAVAIPGEETEIFSRACRKANVWGVFSLTGERHEEHPRKAPYNTLVLIDNNGEIVQKYRKIIPWCPIEGWYPGGQTYVSEGPKGMKISLIICDDGNYPEIWRDCAMKGAELIVRCQGYMYPAKDQQVMMAKAMAWANNCYVAVANAAGFDGVYSYFGHSAIIGFDGRTLGECGEEEMGIQYAQLSLSQIRDARANDQSQNHLFKILHRGYSGLQASGDGDRGLAECPFEFYRTWVTDAEKARENVERLTRSTTGVAQCPVGRLPYEGLEKEA",
                      "predictions": {
                        "isobutyramide_normalized_fitness": {
                          "y_mu": -0.4679494798183441,
                          "y_var": 0.09879031032323837
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "201": {
            "description": "Results not available yet. `job_id` will be `null` unless a new job is created. Poll POST /predict/ or GET /predict/{job_id} for result",
            "content": {
              "application/json": {
                "example": {
                  "job_id": "accf29ef-e67d-4e3c-8540-2e59e53aa086",
                  "job_type": "/workflow/predict",
                  "page_size": 1000,
                  "page_offset": 0,
                  "num_rows": 0
                }
              },
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/PredictJob"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBase": []
          }
        ]
      }
    },
    "/api/v1/workflow/predict/single_site": {
      "post": {
        "tags": ["predict"],
        "summary": "Predict performance for single site mutants",
        "description": "Create and score all single mutants with OpenProtein trained models. \n\nNote that this endpoint requires you to have a trained model (and associated ID) from a completed POST /train event.\nSimply supply the job_id from this train job to use that model in this predict task. \n\nNote: if `train_job_id` is given, will perform prediction using all\nmodels produced in the train job.\n\n---\n\nArgs:\n\n    predict_job_in (schemas.PredictJobCreate): Either a list of `model_id`s OR a `train_job_id`\n\nRaises:\n\n    HTTPException (40x): Job not found\n\nReturns:\n\n    Job: Job Details",
        "operationId": "create_single_site_predict_job_workflow_predict_single_site_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "default": 1000
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Page Offset",
              "minimum": 0,
              "type": "integer",
              "default": 0
            },
            "name": "page_offset",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PredictSingleSiteJobCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Job result available",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/PredictSingleSiteJob"
                }
              },
              "application/json": {
                "example": {
                  "job_type": "/workflow/predict/single_site",
                  "page_size": 1000,
                  "page_offset": 0,
                  "num_rows": 6920,
                  "result": [
                    {
                      "position": 0,
                      "amino_acid": "A",
                      "predictions": {
                        "isobutyramide_normalized_fitness": {
                          "y_mu": -0.5323987007141113,
                          "y_var": 0.557849109172821
                        }
                      }
                    },
                    {
                      "position": 0,
                      "amino_acid": "R",
                      "predictions": {
                        "isobutyramide_normalized_fitness": {
                          "y_mu": -0.2904603183269501,
                          "y_var": 0.15385624766349792
                        }
                      }
                    },
                    {
                      "more": "stuff"
                    }
                  ]
                }
              }
            }
          },
          "201": {
            "description": "Job has been created, result not available yet. Poll POST /predict/single_site or GET /predict/single_site/{job_id} for result",
            "content": {
              "application/json": {
                "example": {
                  "job_id": "e8fa0fd0-11ad-4ce4-ab8f-a8b7c8776921",
                  "job_type": "/workflow/predict/single_site",
                  "page_size": 1000,
                  "page_offset": 0,
                  "num_rows": 0
                }
              },
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/PredictSingleSiteJob"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBase": []
          }
        ]
      }
    },
    "/api/v1/workflow/predict/{job_id}": {
      "get": {
        "tags": ["predict"],
        "summary": "Get results for predict jobs",
        "description": "Get job details and results for a prediction job (not single_site). \n\nRequires a Job id (created when calling POST /predict). Will return results when status is `SUCCESSFUL`. \n\n---\n\nArgs:\n\n    job_id (str): id created from POST /predict\n    page_size (int, optional): number of results to return. \n    page_offset (int, optional): number of results to offset.\n\nRaises:\n\n    HTTPException (40x): Job not found\n\nReturns:\n\n    Job: Job results",
        "operationId": "get_predict_details_workflow_predict__job_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Job Id",
              "type": "string"
            },
            "name": "job_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "default": 1000
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Page Offset",
              "minimum": 0,
              "type": "integer",
              "default": 0
            },
            "name": "page_offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/PredictJobDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBase": []
          }
        ]
      }
    },
    "/api/v1/workflow/predict/single_site/{job_id}": {
      "get": {
        "tags": ["predict"],
        "summary": "Get results for single_site predict jobs",
        "description": "Get job details for a single_site prediction job (from POST /predict/single_site). \n\nRequires a Job id (created when calling POST /single_site). Will return results when status is `SUCCESSFUL`. \n\n---\n\nArgs:\n\n    job_id (str): id created from POST /single_site\n    page_size (int, optional): number of results to return. \n    page_offset (int, optional): number of results to offset.\n\nRaises:\n\n    HTTPException (40x): Job not found\n\nReturns:\n\n    Job: Job results",
        "operationId": "get_single_site_predict_details_workflow_predict_single_site__job_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Job Id",
              "type": "string"
            },
            "name": "job_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "default": 1000
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Page Offset",
              "minimum": 0,
              "type": "integer",
              "default": 0
            },
            "name": "page_offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/PredictSingleSiteJobDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBase": []
          }
        ]
      }
    },
    "/api/v1/workflow/embed/umap/{assay_id}": {
      "get": {
        "tags": ["embed"],
        "summary": "Get Umap Embedding",
        "description": "Retrieve UMAP embeddings.\n\nRequires a POST UMAP job to have been completed on an uploaded assaydata set. \n\n---\n\nArgs: \n\n    - assay_id (str): assay id from POST umap\n\nReturns: \n\n    - Job",
        "operationId": "get_umap_embedding_workflow_embed_umap__assay_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Assay Id",
              "type": "string"
            },
            "name": "assay_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "default": 1000
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Page Offset",
              "minimum": 0,
              "type": "integer",
              "default": 0
            },
            "name": "page_offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/EmbedJob"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBase": []
          }
        ]
      },
      "post": {
        "tags": ["embed"],
        "summary": "Create Umap Embedding",
        "description": "Create UMAP embedding for your assay data. \n\nRequires an assay_id from POST /assaydata job. \n\n--- \nArgs: \n\n    assay_id (str): assay id\n\nReturns: \n\n    Job",
        "operationId": "create_umap_embedding_workflow_embed_umap__assay_id__post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Assay Id",
              "type": "string"
            },
            "name": "assay_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Force Preprocess",
              "type": "boolean",
              "default": false
            },
            "name": "force_preprocess",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBase": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AssayMetadata": {
        "title": "AssayMetadata",
        "required": [
          "assay_id",
          "original_filename",
          "created_date",
          "num_rows",
          "num_entries"
        ],
        "type": "object",
        "properties": {
          "assay_name": {
            "title": "Assay Name",
            "type": "string"
          },
          "assay_description": {
            "title": "Assay Description",
            "type": "string"
          },
          "assay_id": {
            "title": "Assay Id",
            "type": "string"
          },
          "project_uuid": {
            "title": "Project Uuid",
            "type": "string"
          },
          "original_filename": {
            "title": "Original Filename",
            "type": "string"
          },
          "created_date": {
            "title": "Created Date",
            "type": "string",
            "format": "date-time"
          },
          "num_rows": {
            "title": "Num Rows",
            "type": "integer"
          },
          "num_entries": {
            "title": "Num Entries",
            "type": "integer"
          },
          "measurement_names": {
            "title": "Measurement Names",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "parent_sequence": {
            "title": "Parent Sequence",
            "type": "string"
          }
        },
        "description": "Properties returned about assay metadata via API."
      },
      "Body_create_assay_data_assaydata_post": {
        "title": "Body_create_assay_data_assaydata_post",
        "required": ["assay_data", "assay_name"],
        "type": "object",
        "properties": {
          "assay_data": {
            "title": "Assay Data",
            "type": "string",
            "format": "binary"
          },
          "assay_name": {
            "title": "Assay Name",
            "type": "string"
          },
          "assay_description": {
            "title": "Assay Description",
            "type": "string",
            "default": ""
          }
        }
      },
      "CriterionSchema": {
        "title": "CriterionSchema",
        "required": ["target"],
        "type": "object",
        "properties": {
          "target": {
            "title": "Target",
            "type": "number"
          },
          "direction": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DirectionEnum"
              }
            ],
            "default": ">"
          },
          "weight": {
            "title": "Weight",
            "type": "number",
            "default": 1
          }
        }
      },
      "DesignJob": {
        "title": "DesignJob",
        "required": ["status", "created_date", "job_type"],
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/JobStatus"
          },
          "job_id": {
            "title": "Job Id",
            "type": "string"
          },
          "created_date": {
            "title": "Created Date",
            "type": "string",
            "format": "date-time"
          },
          "job_type": {
            "$ref": "#/components/schemas/JobType"
          },
          "start_date": {
            "title": "Start Date",
            "type": "string",
            "format": "date-time"
          },
          "end_date": {
            "title": "End Date",
            "type": "string",
            "format": "date-time"
          },
          "prerequisite_job_id": {
            "title": "Prerequisite Job Id",
            "type": "string"
          },
          "progress_message": {
            "title": "Progress Message",
            "type": "string"
          },
          "progress_counter": {
            "title": "Progress Counter",
            "type": "integer"
          },
          "assay_id": {
            "title": "Assay Id",
            "type": "string"
          },
          "num_rows": {
            "title": "Num Rows",
            "type": "integer",
            "default": 0
          },
          "result": {
            "title": "Result",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DesignJobResult"
            },
            "default": []
          }
        },
        "description": "Properties returned via API for design job."
      },
      "DesignJobResult": {
        "title": "DesignJobResult",
        "required": [
          "step",
          "sample_index",
          "sequence",
          "scores",
          "subscores_metadata"
        ],
        "type": "object",
        "properties": {
          "step": {
            "title": "Step",
            "type": "integer"
          },
          "sample_index": {
            "title": "Sample Index",
            "type": "integer"
          },
          "sequence": {
            "title": "Sequence",
            "type": "string"
          },
          "scores": {
            "title": "Scores",
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "subscores_metadata": {
            "title": "Subscores Metadata",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SubscoreMetadata"
              }
            }
          },
          "umap1": {
            "title": "Umap1",
            "type": "number"
          },
          "umap2": {
            "title": "Umap2",
            "type": "number"
          }
        },
        "description": "Properties returned about design job result for a sequence."
      },
      "DirectionEnum": {
        "title": "DirectionEnum",
        "enum": [">", "<", "="],
        "type": "string",
        "description": "An enumeration."
      },
      "EmbedJob": {
        "title": "EmbedJob",
        "required": ["status", "created_date", "job_type"],
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/JobStatus"
          },
          "job_id": {
            "title": "Job Id",
            "type": "string"
          },
          "created_date": {
            "title": "Created Date",
            "type": "string",
            "format": "date-time"
          },
          "job_type": {
            "$ref": "#/components/schemas/JobType"
          },
          "start_date": {
            "title": "Start Date",
            "type": "string",
            "format": "date-time"
          },
          "end_date": {
            "title": "End Date",
            "type": "string",
            "format": "date-time"
          },
          "prerequisite_job_id": {
            "title": "Prerequisite Job Id",
            "type": "string"
          },
          "progress_message": {
            "title": "Progress Message",
            "type": "string"
          },
          "progress_counter": {
            "title": "Progress Counter",
            "type": "integer"
          },
          "num_rows": {
            "title": "Num Rows",
            "type": "integer",
            "default": 0
          },
          "page_size": {
            "title": "Page Size",
            "type": "integer",
            "default": 0
          },
          "page_offset": {
            "title": "Page Offset",
            "type": "integer",
            "default": 0
          },
          "result": {
            "title": "Result",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Embedding"
            },
            "default": []
          }
        },
        "description": "Properties returned about embed job via API."
      },
      "Embedding": {
        "title": "Embedding",
        "required": ["row_index", "umap1", "umap2"],
        "type": "object",
        "properties": {
          "row_index": {
            "title": "Row Index",
            "type": "integer"
          },
          "umap1": {
            "title": "Umap1",
            "type": "number"
          },
          "umap2": {
            "title": "Umap2",
            "type": "number"
          }
        },
        "description": "Embeddings object returned within job result."
      },
      "GeneticAlgorithmJobCreate": {
        "title": "GeneticAlgorithmJobCreate",
        "required": ["assay_id", "criteria", "num_steps"],
        "type": "object",
        "properties": {
          "assay_id": {
            "title": "Assay Id",
            "type": "string"
          },
          "criteria": {
            "title": "Criteria",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModelCriterion"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NMutationsCriterion"
                  }
                }
              ]
            }
          },
          "num_steps": {
            "title": "Number of steps to run the algorithm for",
            "minimum": 1,
            "type": "integer"
          },
          "pop_size": {
            "title": "Pop Size",
            "type": "integer",
            "default": 256
          },
          "n_offsprings": {
            "title": "N Offsprings",
            "type": "integer",
            "default": 5120
          },
          "crossover_prob": {
            "title": "Crossover Prob",
            "type": "number",
            "default": 1
          },
          "crossover_prob_pointwise": {
            "title": "Crossover Prob Pointwise",
            "type": "number",
            "default": 0.2
          },
          "mutation_average_mutations_per_seq": {
            "title": "Mutation Average Mutations Per Seq",
            "type": "integer",
            "default": 1
          },
          "mutation_positions": {
            "title": "Mutation Positions",
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "description": "Properties required to create a genetic algo design job.",
        "example": {
          "assay_id": "e7e5b64c-7a88-4f33-af21-8638123fbf7c",
          "criteria": [
            [
              {
                "criterion_type": "model",
                "model_id": "ec0364fd-83ff-4f26-bc17-eb0bd8cfcae5",
                "measurement_name": "activity",
                "criterion": {
                  "target": 0,
                  "weight": 0.5,
                  "direction": ">"
                }
              },
              {
                "criterion_type": "model",
                "model_id": "ec0364fd-83ff-4f26-bc17-eb0bd8cfcae5",
                "measurement_name": "expression",
                "criterion": {
                  "target": 12,
                  "weight": 0.5,
                  "direction": ">"
                }
              }
            ],
            [
              {
                "criterion_type": "model",
                "model_id": "ec0364fd-83ff-4f26-bc17-eb0bd8cfcae5",
                "measurement_name": "activity",
                "criterion": {
                  "target": 1,
                  "weight": 1,
                  "direction": ">"
                }
              }
            ],
            [
              {
                "criterion_type": "n_mutations",
                "sequences": ["MNFPRASRLMQAAVLGGLMAVSAAATAQ"]
              }
            ]
          ],
          "num_steps": 10,
          "pop_size": 256,
          "n_offsprings": 256,
          "crossover_prob": 1,
          "crossover_prob_pointwise": 0.2,
          "mutation_average_mutations_per_seq": 1,
          "mutation_positions": [1, 2, 5, 7]
        }
      },
      "HTTPExceptionResponse": {
        "title": "HTTPExceptionResponse",
        "required": ["detail"],
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "string"
          }
        },
        "description": "Standard HTTP response."
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "Job": {
        "title": "Job",
        "required": ["status", "created_date", "job_type"],
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/JobStatus"
          },
          "job_id": {
            "title": "Job Id",
            "type": "string"
          },
          "created_date": {
            "title": "Created Date",
            "type": "string",
            "format": "date-time"
          },
          "job_type": {
            "$ref": "#/components/schemas/JobType"
          },
          "start_date": {
            "title": "Start Date",
            "type": "string",
            "format": "date-time"
          },
          "end_date": {
            "title": "End Date",
            "type": "string",
            "format": "date-time"
          },
          "prerequisite_job_id": {
            "title": "Prerequisite Job Id",
            "type": "string"
          },
          "progress_message": {
            "title": "Progress Message",
            "type": "string"
          },
          "progress_counter": {
            "title": "Progress Counter",
            "type": "integer"
          }
        },
        "description": "Properties returned about job via API."
      },
      "JobStatus": {
        "title": "JobStatus",
        "enum": [
          "PENDING",
          "RETRYING",
          "RUNNING",
          "SUCCESS",
          "FAILURE",
          "CANCELED"
        ],
        "type": "string",
        "description": "Status type for job.\n\nDescribes the current status of a job."
      },
      "JobType": {
        "title": "JobType",
        "enum": [
          "/workflow/preprocess",
          "/workflow/train",
          "/workflow/embed/umap",
          "/workflow/predict",
          "/workflow/predict/single_site",
          "/workflow/crossvalidate",
          "/workflow/evaluate",
          "/workflow/design",
          "/align/align",
          "/align/prompt",
          "/poet",
          "/poet/single_site",
          "/poet/generate",
          "/embeddings/embed",
          "/embeddings/svd",
          "/embeddings/attn",
          "/embeddings/logits"
        ],
        "type": "string",
        "description": "Type of job.\n\nDescribes the types of jobs that can be done."
      },
      "ModelCriterion": {
        "title": "ModelCriterion",
        "required": [
          "criterion_type",
          "model_id",
          "measurement_name",
          "criterion"
        ],
        "type": "object",
        "properties": {
          "criterion_type": {
            "title": "Criterion Type",
            "enum": ["model"],
            "type": "string"
          },
          "model_id": {
            "title": "Model Id",
            "type": "string"
          },
          "measurement_name": {
            "title": "Measurement Name",
            "type": "string"
          },
          "criterion": {
            "$ref": "#/components/schemas/CriterionSchema"
          }
        },
        "description": "Criteria for design model."
      },
      "NMutationsCriterion": {
        "title": "NMutationsCriterion",
        "required": ["criterion_type"],
        "type": "object",
        "properties": {
          "criterion_type": {
            "title": "Criterion Type",
            "enum": ["n_mutations"],
            "type": "string"
          },
          "sequences": {
            "title": "Sequences",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Criteria for design based on mutations."
      },
      "PredictJob": {
        "title": "PredictJob",
        "required": ["job_type", "page_size", "page_offset"],
        "type": "object",
        "properties": {
          "job_id": {
            "title": "Job Id",
            "type": "string"
          },
          "job_type": {
            "$ref": "#/components/schemas/JobType"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/JobStatus"
              }
            ],
            "default": "PENDING"
          },
          "page_size": {
            "title": "Page Size",
            "type": "integer"
          },
          "page_offset": {
            "title": "Page Offset",
            "type": "integer"
          },
          "num_rows": {
            "title": "Num Rows",
            "type": "integer",
            "default": 0
          },
          "result": {
            "title": "Result",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/vault__schemas__workflow__predict__PredictJob__SequencePrediction"
            }
          }
        },
        "description": "Properties about predict job returned via API."
      },
      "PredictJobCreate": {
        "title": "PredictJobCreate",
        "required": ["sequences"],
        "type": "object",
        "properties": {
          "model_id": {
            "title": "Model Id",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "train_job_id": {
            "title": "Train Job Id",
            "type": "string"
          },
          "sequences": {
            "title": "Sequences",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Required properties when creating a predict job.",
        "example": {
          "model_id": [
            "18ab63a6-28ee-4113-8f76-4b6ba436a585",
            "28ee63a6-18ab-8f76-4113-a5854b6ba436"
          ],
          "sequences": [
            "ACRKDINSANDTVGVAVVNYKMPRLHTAAEVLDNARKIAEMIVGMKQGLPGMDLVVFPEYSLQGIMYDPAEMMETAVAIPGEETEIFSRACRKANVWGVFSLTGERHEEHPRKAPYNTLVLIDNNGEIVQKYRKIIPWCPIEGWYPGGQTYVSEGPKGMKISLIICDDGNYPEIWRDCAMKGAELIVRCQGYMYPAKDQQVMMAKAMAWANNCYVAVANAAGFDGVYSYFGHSAIIGFDGRTLGECGEEEMGIQYAQLSLSQIRDARANDQSQNHLFKILHRGYSGLQASGDGDRGLAECPFEFYRTWVTDAEKARENVERLTRSTTGVAQCPVGRLPYEGLEKEA",
            "BCRKDINSANDTVGVAVVNYKMPRLHTAAEVLDNARKIAEMIVGMKQGLPGMDLVVFPEYSLQGIMYDPAEMMETAVAIPGEETEIFSRACRKANVWGVFSLTGERHEEHPRKAPYNTLVLIDNNGEIVQKYRKIIPWCPIEGWYPGGQTYVSEGPKGMKISLIICDDGNYPEIWRDCAMKGAELIVRCQGYMYPAKDQQVMMAKAMAWANNCYVAVANAAGFDGVYSYFGHSAIIGFDGRTLGECGEEEMGIQYAQLSLSQIRDARANDQSQNHLFKILHRGYSGLQASGDGDRGLAECPFEFYRTWVTDAEKARENVERLTRSTTGVAQCPVGRLPYEGLEKEA"
          ]
        }
      },
      "PredictJobDetails": {
        "title": "PredictJobDetails",
        "required": [
          "job_type",
          "status",
          "page_size",
          "page_offset",
          "created_date"
        ],
        "type": "object",
        "properties": {
          "job_id": {
            "title": "Job Id",
            "type": "string"
          },
          "job_type": {
            "$ref": "#/components/schemas/JobType"
          },
          "status": {
            "$ref": "#/components/schemas/JobStatus"
          },
          "page_size": {
            "title": "Page Size",
            "type": "integer"
          },
          "page_offset": {
            "title": "Page Offset",
            "type": "integer"
          },
          "num_rows": {
            "title": "Num Rows",
            "type": "integer",
            "default": 0
          },
          "result": {
            "title": "Result",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/vault__schemas__workflow__predict__PredictJob__SequencePrediction"
            }
          },
          "created_date": {
            "title": "Created Date",
            "type": "string",
            "format": "date-time"
          },
          "start_date": {
            "title": "Start Date",
            "type": "string",
            "format": "date-time"
          },
          "end_date": {
            "title": "End Date",
            "type": "string",
            "format": "date-time"
          },
          "prerequisite_job_id": {
            "title": "Prerequisite Job Id",
            "type": "string"
          },
          "progress_message": {
            "title": "Progress Message",
            "type": "string"
          },
          "progress_counter": {
            "title": "Progress Counter",
            "type": "integer"
          }
        },
        "description": "Detailed properties returned about predict job via API."
      },
      "PredictSingleSiteJob": {
        "title": "PredictSingleSiteJob",
        "required": ["job_type", "page_size", "page_offset"],
        "type": "object",
        "properties": {
          "job_id": {
            "title": "Job Id",
            "type": "string"
          },
          "job_type": {
            "$ref": "#/components/schemas/JobType"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/JobStatus"
              }
            ],
            "default": "PENDING"
          },
          "page_size": {
            "title": "Page Size",
            "type": "integer"
          },
          "page_offset": {
            "title": "Page Offset",
            "type": "integer"
          },
          "num_rows": {
            "title": "Num Rows",
            "type": "integer",
            "default": 0
          },
          "result": {
            "title": "Result",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/vault__schemas__workflow__predict__PredictSingleSiteJob__SequencePrediction"
            }
          }
        },
        "description": "Properties about single-site prediction job returned via API."
      },
      "PredictSingleSiteJobCreate": {
        "title": "PredictSingleSiteJobCreate",
        "required": ["sequence"],
        "type": "object",
        "properties": {
          "model_id": {
            "title": "Model Id",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "train_job_id": {
            "title": "Train Job Id",
            "type": "string"
          },
          "sequence": {
            "title": "Sequence",
            "type": "string"
          }
        },
        "description": "Required properties when creating a single-site predict job.",
        "example": {
          "model_id": [
            "18ab63a6-28ee-4113-8f76-4b6ba436a585",
            "28ee63a6-18ab-8f76-4113-a5854b6ba436"
          ],
          "sequence": "ACRKDINSANDTVGVAVVNYKMPRLHTAAEVLDNARKIAEMIVGMKQGLPGMDLVVFPEYSLQGIMYDPAEMMETAVAIPGEETEIFSRACRKANVWGVFSLTGERHEEHPRKAPYNTLVLIDNNGEIVQKYRKIIPWCPIEGWYPGGQTYVSEGPKGMKISLIICDDGNYPEIWRDCAMKGAELIVRCQGYMYPAKDQQVMMAKAMAWANNCYVAVANAAGFDGVYSYFGHSAIIGFDGRTLGECGEEEMGIQYAQLSLSQIRDARANDQSQNHLFKILHRGYSGLQASGDGDRGLAECPFEFYRTWVTDAEKARENVERLTRSTTGVAQCPVGRLPYEGLEKEA"
        }
      },
      "PredictSingleSiteJobDetails": {
        "title": "PredictSingleSiteJobDetails",
        "required": [
          "job_type",
          "status",
          "page_size",
          "page_offset",
          "created_date"
        ],
        "type": "object",
        "properties": {
          "job_id": {
            "title": "Job Id",
            "type": "string"
          },
          "job_type": {
            "$ref": "#/components/schemas/JobType"
          },
          "status": {
            "$ref": "#/components/schemas/JobStatus"
          },
          "page_size": {
            "title": "Page Size",
            "type": "integer"
          },
          "page_offset": {
            "title": "Page Offset",
            "type": "integer"
          },
          "num_rows": {
            "title": "Num Rows",
            "type": "integer",
            "default": 0
          },
          "result": {
            "title": "Result",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/vault__schemas__workflow__predict__PredictSingleSiteJob__SequencePrediction"
            }
          },
          "created_date": {
            "title": "Created Date",
            "type": "string",
            "format": "date-time"
          },
          "start_date": {
            "title": "Start Date",
            "type": "string",
            "format": "date-time"
          },
          "end_date": {
            "title": "End Date",
            "type": "string",
            "format": "date-time"
          },
          "prerequisite_job_id": {
            "title": "Prerequisite Job Id",
            "type": "string"
          },
          "progress_message": {
            "title": "Progress Message",
            "type": "string"
          },
          "progress_counter": {
            "title": "Progress Counter",
            "type": "integer"
          }
        },
        "description": "Detailed properties returned about single-site predict job via API."
      },
      "Prediction": {
        "title": "Prediction",
        "required": ["model_id", "model_name", "properties"],
        "type": "object",
        "properties": {
          "model_id": {
            "title": "Model Id",
            "type": "string"
          },
          "model_name": {
            "title": "Model Name",
            "type": "string"
          },
          "properties": {
            "title": "Properties",
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "number"
              }
            }
          }
        },
        "description": "Prediction details."
      },
      "SubscoreMetadata": {
        "title": "SubscoreMetadata",
        "required": ["score", "metadata"],
        "type": "object",
        "properties": {
          "score": {
            "title": "Score",
            "type": "number"
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "additionalProperties": {
              "type": "number"
            }
          }
        },
        "description": "Nested object in results for storing score and metadata."
      },
      "TrainGraphPoint": {
        "title": "TrainGraphPoint",
        "required": ["loss", "created_date"],
        "type": "object",
        "properties": {
          "step": {
            "title": "Step",
            "type": "integer",
            "description": "Use the `step` field in the `tags` json",
            "deprecated": true
          },
          "loss": {
            "title": "Loss",
            "type": "number"
          },
          "tag": {
            "title": "Tag",
            "type": "string",
            "description": "Use the `measurement_name` field in the `tags` json",
            "deprecated": true
          },
          "tags": {
            "title": "Tags",
            "type": "object",
            "default": {}
          },
          "created_date": {
            "title": "Created Date",
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "Properties about a point in the training graph."
      },
      "TrainJob": {
        "title": "TrainJob",
        "required": ["status", "created_date", "job_type"],
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/JobStatus"
          },
          "job_id": {
            "title": "Job Id",
            "type": "string"
          },
          "created_date": {
            "title": "Created Date",
            "type": "string",
            "format": "date-time"
          },
          "job_type": {
            "$ref": "#/components/schemas/JobType"
          },
          "start_date": {
            "title": "Start Date",
            "type": "string",
            "format": "date-time"
          },
          "end_date": {
            "title": "End Date",
            "type": "string",
            "format": "date-time"
          },
          "prerequisite_job_id": {
            "title": "Prerequisite Job Id",
            "type": "string"
          },
          "progress_message": {
            "title": "Progress Message",
            "type": "string"
          },
          "progress_counter": {
            "title": "Progress Counter",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "type": "string"
          },
          "traingraph": {
            "title": "Traingraph",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrainGraphPoint"
            }
          }
        },
        "description": "Properties returned about training job via API."
      },
      "TrainJobCreate": {
        "title": "TrainJobCreate",
        "required": ["assay_id"],
        "type": "object",
        "properties": {
          "assay_id": {
            "title": "Assay Id",
            "type": "string"
          },
          "measurement_name": {
            "title": "Measurement Name",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "model_name": {
            "title": "Model Name",
            "type": "string",
            "default": ""
          }
        },
        "description": "Properties required to create a training job."
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": ["loc", "msg", "type"],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      },
      "vault__schemas__workflow__predict__PredictJob__SequencePrediction": {
        "title": "SequencePrediction",
        "required": ["sequence"],
        "type": "object",
        "properties": {
          "sequence": {
            "title": "Sequence",
            "type": "string"
          },
          "predictions": {
            "title": "Predictions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Prediction"
            },
            "default": []
          }
        },
        "description": "Sequence prediction."
      },
      "vault__schemas__workflow__predict__PredictSingleSiteJob__SequencePrediction": {
        "title": "SequencePrediction",
        "required": ["position", "amino_acid"],
        "type": "object",
        "properties": {
          "position": {
            "title": "Position",
            "type": "integer"
          },
          "amino_acid": {
            "title": "Amino Acid",
            "type": "string"
          },
          "predictions": {
            "title": "Predictions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Prediction"
            },
            "default": []
          }
        },
        "description": "Sequence prediction."
      }
    },
    "securitySchemes": {
      "HTTPBase": {
        "type": "oauth2",
        "flows": {
          "password": {
            "scopes": {},
            "tokenUrl": "/api/v1/login/access-token"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "train",
      "description": "Train ML models based on your datasets!"
    },
    {
      "name": "predict",
      "description": "Endpoints for predicting properties on arbitary sequences with your OpenProtein trained models!"
    },
    {
      "name": "assaydata",
      "description": "Upload your dataset for use with /train and /design endpoints!"
    },
    {
      "name": "design",
      "description": "design new variants to meet your design objectives!"
    },
    {
      "name": "embed",
      "description": "Create and retrieve UMAP embeddings for your data!"
    }
  ]
}
