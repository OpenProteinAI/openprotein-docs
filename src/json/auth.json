{
  "openapi": "3.0.2",
  "info": {
    "title": "OpenProtein",
    "description": "\n\nOpenProtein API helps you engineer better proteins ðŸš€\n\n# Getting Started\n\nHere's a quick overview of our jobs system, and steps to access auth credentials for our APIs. You'll find more exhaustive details on our endpoints at `/api/v1/docs` and `/api/v1/poet/docs`, serving our core and generative workflows respectively.\n\n\n## Navigating the Job System\n\nOur endpoints follow an asynchronous POST and GET framework. Once you initiate a task via our POST endpoints, the system schedules the job. This means that even for tasks that may take a while to complete, your request will return immediately. \n\nThe POST response will contain a job ID (`job_id`) in its response json. This job ID is a unique identifier that allows you to track your job. You can use this same job ID with our GET endpoints to monitor the progress of your task.\nPlease note that only **you** can access your jobs, a different user cannot access your jobs even with your specific job ID. \n\nWhilst your job is underway, the API will indicate the status as `PENDING`. Once the job has concluded (`SUCCESS`), you can retrieve your results by invoking the same endpoint using your job ID in the payload (see specific endpoint details for more guidance).\nThe `/api/v1/jobs/JOB_ID` endpoint is at your disposal to check the status of a job before obtaining all the results.\n\nThis design ensures that long-running tasks don't keep you waiting, and ensures you can always get the results of a job back at a later date. \n\nRemember, your job ID is both unique and crucial for fetching the results of your task. So, ensure to keep a note of it when you initiate a task.\n\n# Endpoints\n\n## Login \n\nEndpoints to login from your IDE. Here's a brief user-guide:\n\n### Steps to Log in\n\n#### On this Page\n\nYou can log in directly on this page using the `Authorize` button. This action will let you browse the API documentation and execute test queries directly in your browser.\n\n#### Within your IDE\n\nFor programmatic authorization, retrieve an access token through our `/login` endpoint, then include this in the header of your subsequent requests to authorize access. A Python example using the Requests library is provided below:\n\n```python\nimport requests\n```\n\n```\n# Get the access token using your login credentials:\nr = requests.post(\"https://openprotein.ai/api/v1/login/user-access-token\", data={\"username\": your_username, \"password\": your_password})\nassert r.status_code==200\n```\n```\n# Build the authorization header for subsequent requests\nauth_header = {'Authorization': '{} {}'.format(r.json()['token_type'], r.json()['access_token'])}\n```\n```\n# Make authorized requests to our endpoints, for instance:\nexample_request = requests.get(\"https://openprotein.ai/api/v1/jobs\", headers=auth_header)\nprint(f\"Example request has status {example_request.status_code}\")\n```\n\nFor easier usage, consider using session management:\n\n```\nwith requests.Session() as sess:\n    sess.headers.update(auth_header)\n```\n\n```\nexample_request = requests.get(\"https://openprotein.ai/api/v1/jobs\")\nprint(f\"Example request has status {example_request.status_code}\")\n```\n\n## Jobs \n\nEndpoints to track job status for asynchronous jobs.\n\nUse these to verify the status (PENDING, RUNNING, SUCCESS) of your jobs and view basic metadata (e.g., job creation date).\n\nHere is a simple example where we submit an MSA (multiple sequence alignment) request and then fetch the result:\n\n```\n# Example of jobs \nseed_sequence  = \"MALWMRLLPLLALLALWGPDPAAAFVNQHLCGSHLVEALYLVCGERGFFYTPKTRREAEDLQVGQVELGGGPGAGSLQPLALEGSLQKRGIVEQCCTSICSLYQLENYCN\" # Human INS sequence\nexample_request = requests.post(\"https://openprotein.ai/api/v1/poet/align/msa\", files={\"msa_file\":seed_sequence.encode()}, headers=auth_header)\njob_id = example_request.json()['job_id']\nprint(f\"Example request has status {example_request.status_code} and jobid {job_id}\")\n```\n\n```\n# will be PENDING and then SUCCESS\nresponse = requests.get(\"http://openprotein.ai/api/v1/poet/align/msa\", params={\"job_id\":job_id}, headers=auth_header)\nprint(\"status\", response.headers['job_status'])\nprint(\"Generated MSA: \", response.text)\n```\n\n\n</br>\nFeel free to explore the endpoints at `/api/v1/docs` and `/api/v1/poet/docs`! \n",
    "version": "0.1.0"
  },
  "paths": {
    "/api/v1/jobs": {
      "get": {
        "tags": ["jobs"],
        "summary": "List all jobs under current user",
        "description": "List jobs associated with current user.\n\n---\n\nArgs:\n\n    status (Optional[schemas.JobStatus], optional): filter by job status\n    job_type (Optional[schemas.JobType], optional): filter by job type\n    assay_id (Optional[str], optional): filter by assay id\n\nReturns:\n\n    List: list of jobs",
        "operationId": "list_jobs_api_v1_jobs_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/JobStatus"
            },
            "name": "status",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/JobType"
            },
            "name": "job_type",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "More Recent Than",
              "type": "string",
              "format": "date-time"
            },
            "name": "more_recent_than",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Assay Id",
              "type": "string"
            },
            "name": "assay_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json5": {
                "schema": {
                  "title": "Response List Jobs Api V1 Jobs Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Job"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBase": []
          }
        ]
      }
    },
    "/api/v1/jobs/{job_id}": {
      "get": {
        "tags": ["jobs"],
        "summary": "Get job metadata by job id",
        "description": "Get information about specific job.\n\n---\n\nArgs:\n\n    job_id (str): job identifier\n\nReturns:\n\n    json: job metadata",
        "operationId": "get_job_api_v1_jobs__job_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Job Id",
              "type": "string"
            },
            "name": "job_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json5": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBase": []
          }
        ]
      }
    },
    "/api/v1/login/user-access-token": {
      "post": {
        "tags": ["login"],
        "summary": "login service for API users",
        "description": "OAuth2 compatible token login.\n\nProvides an access token for future requests.",
        "operationId": "user_login_token_swagger_api_v1_login_user_access_token_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Username",
              "type": "string"
            },
            "name": "username",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "Password",
              "type": "string"
            },
            "name": "password",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPExceptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "HTTPExceptionResponse": {
        "title": "HTTPExceptionResponse",
        "required": ["detail"],
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "string"
          }
        },
        "description": "Standard HTTP response."
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "Job": {
        "title": "Job",
        "required": ["status", "created_date", "job_type"],
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/JobStatus"
          },
          "job_id": {
            "title": "Job Id",
            "type": "string"
          },
          "created_date": {
            "title": "Created Date",
            "type": "string",
            "format": "date-time"
          },
          "job_type": {
            "$ref": "#/components/schemas/JobType"
          },
          "start_date": {
            "title": "Start Date",
            "type": "string",
            "format": "date-time"
          },
          "end_date": {
            "title": "End Date",
            "type": "string",
            "format": "date-time"
          },
          "prerequisite_job_id": {
            "title": "Prerequisite Job Id",
            "type": "string"
          },
          "progress_message": {
            "title": "Progress Message",
            "type": "string"
          },
          "progress_counter": {
            "title": "Progress Counter",
            "type": "integer"
          }
        },
        "description": "Properties returned about job via API."
      },
      "JobStatus": {
        "title": "JobStatus",
        "enum": [
          "PENDING",
          "RETRYING",
          "RUNNING",
          "SUCCESS",
          "FAILURE",
          "CANCELED"
        ],
        "type": "string",
        "description": "Status type for job.\n\nDescribes the current status of a job."
      },
      "JobType": {
        "title": "JobType",
        "enum": [
          "/workflow/preprocess",
          "/workflow/train",
          "/workflow/embed/umap",
          "/workflow/predict",
          "/workflow/predict/single_site",
          "/workflow/crossvalidate",
          "/workflow/evaluate",
          "/workflow/design",
          "/align/align",
          "/align/prompt",
          "/poet",
          "/poet/single_site",
          "/poet/generate",
          "/embeddings/embed",
          "/embeddings/svd",
          "/embeddings/attn",
          "/embeddings/logits"
        ],
        "type": "string",
        "description": "Type of job.\n\nDescribes the types of jobs that can be done."
      },
      "Token": {
        "title": "Token",
        "required": ["access_token", "token_type"],
        "type": "object",
        "properties": {
          "access_token": {
            "title": "Access Token",
            "type": "string"
          },
          "token_type": {
            "title": "Token Type",
            "type": "string"
          }
        },
        "description": "OAuth2 Token."
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": ["loc", "msg", "type"],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "HTTPBase": {
        "type": "oauth2",
        "flows": {
          "password": {
            "scopes": {},
            "tokenUrl": "/api/v1/login/access-token"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "login",
      "description": "Login to authorize your API requests!"
    },
    {
      "name": "jobs",
      "description": "Track your submitted workflow jobs!"
    }
  ]
}
