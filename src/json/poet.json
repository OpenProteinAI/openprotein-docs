{
    "openapi": "3.0.2",
    "info": {
      "title": "OpenProtein",
      "description": "\nOpenProtein API helps you engineer better proteins ðŸš€\n\n# Getting Started\n\nThese endpoints provide all the PoET functionality for your programatic needs! \nBefore starting here, you might want to read our `/docs` page to understand how to log in from your IDE, and how our asynchronous job system works. \n\n\n## Other user materials \n\nThere is a comprehensive [User Guide](https://docs.openprotein.ai/) with descriptions of each workflow.\n\nWe also provide demos of core workflows:\n* [Using our generative PoET model to develop new sequences prior to any wetlab measurements](https://docs.openprotein.ai/poet-thiolase-codehidden.html).\n* [Using our generative PoET model to explore single site mutant variants](https://docs.openprotein.ai/poet-tutorial-page.html)\n\nLastly, we have [demo datasets](https://docs.openprotein.ai/demo-datasets-page.html) that can be used to gain familiarity with our workflows. \n\nWe encourage you to peruse these resources before starting your workflows for the optimal experience. \n\n# Endpoints\n\n### Align\n\nEndpoints to perform multiple sequence alignment (MSA) workflows for `PoET`. See the [User Guide](https://docs.openprotein.ai/poet-defining-prompts-page.html).\n\nYou can create a multiple sequence alignment from a seed sequence, upload a custom MSA, or even upload your own prompt for use with `PoET` endpoints!\n\n### PoET\n\nEndpoints to call our generative Protein Evolutionary Transformer (PoET) model for *de novo* generation of proteins, evaluation of protein fitness, and single site mutant analysis of proteins. \nThese workflows are all possible without prior wetlab data, and therefore do not require assaydata to be pre-loaded!\n\nNote that PoET requires a prompt, (ie. a set of sequences representing the target protein sequence distribution). This will commonly be an evolutionary context prompt in the form of filtered MSAs (`Align`). But you can use whatever collection of sequences your workflow requires!\n\nSee the [User Guide](https://docs.openprotein.ai/poet-defining-prompts-page.html#defining-the-prompt) for more information.\n\n## Contact Us\n\n",
      "version": "0.1.0",
      "contact": {
        "name": "OpenProtein",
        "url": "https://www.openprotein.ai/",
        "email": "support@ne47.bio"
      }
    },
    "paths": {
      "/api/v1/poet/score": {
        "get": {
          "tags": ["poet"],
          "summary": "Get poet scores",
          "description": "Get scores and status for poet job.\n\nGets results from poet/score jobs. Results are returned as         `name, sequence, scores`. \nthe number of scores is equal to the number of replicates defined in /align/prompt. \n\nReturns a list of jsons.\n\nYou can supply a parent_id to fetch all child job results. \nA child job is defined as a job created when \"adding\" sequences to a \"parent\"     via poet/add_sequences\n---\n\nArgs: \n\n    - job_id (str): job_id to fetch\n    - parent_id (str, optional): id for parent job. Defaults to own jobid.\n    - page_size (int): entries per page\n    - page_offset (int): number of entries to offset\n\nRaises: \n\n    - HTTPException (40X): If job can not be found\n\nReturns: \n\n    - list[json]\n---",
          "operationId": "get_prots2prot_scores_score_get",
          "parameters": [
            {
              "required": false,
              "schema": { "title": "Job Id", "type": "string" },
              "name": "job_id",
              "in": "query"
            },
            {
              "required": false,
              "schema": { "title": "Parent Id", "type": "string" },
              "name": "parent_id",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Page Size",
                "maximum": 1000000.0,
                "minimum": 1.0,
                "type": "integer",
                "default": 10000
              },
              "name": "page_size",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Page Offset",
                "minimum": 0.0,
                "type": "integer",
                "default": 0
              },
              "name": "page_offset",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json5": {
                  "schema": { "$ref": "#/components/schemas/PoetJobDetails" }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "404": { "description": "Not found." },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
                }
              }
            }
          },
          "security": [{ "HTTPBase": [] }]
        },
        "post": {
          "tags": ["poet"],
          "summary": "Create Poet Scores",
          "description": "Create poet scoring job from a prompt id and variants file.\n\nprompt_id can be obtained from /align/prompt or /align/upload_prompt.\n\nCurrently supports CSV and Fa formats. \nFor CSV we expect a headerless upload including either:\n\n    * a 2 column file: Names, Sequences\n    * a 1 column file: Sequences\n\nArgs: \n\n    - variant_file (File): either fasta or CSV (see above)\n    - prompt_id (str): job_id from /align/prompt or /align/upload_prompt. \n\nRaises: \n\n    - HTTPException (40X): If job can not be created\n\nReturns: \n\n    - Job: submitted Job details\n---",
          "operationId": "create_poet_scores_score_post",
          "parameters": [
            {
              "required": false,
              "schema": { "title": "Prompt Id", "type": "string" },
              "name": "prompt_id",
              "in": "query"
            },
            {
              "required": false,
              "schema": { "title": "Mock", "type": "boolean", "default": false },
              "name": "mock",
              "in": "query"
            }
          ],
          "requestBody": {
            "content": {
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Body_create_poet_scores_score_post"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json5": {
                  "schema": { "$ref": "#/components/schemas/Job" }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "404": { "description": "Not found." },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
                }
              }
            }
          },
          "security": [{ "HTTPBase": [] }]
        }
      },
      "/api/v1/poet/single_site": {
        "get": {
          "tags": ["poet"],
          "summary": "Get poet single_site scores",
          "description": "Get scores and status for poet/single_site job.\n\nReturns a List[json] response with mutation codes and scores.\n\n---\n\nArgs: \n\n    - job_id (str): job_id to fetch\n    - page_size (int): entries per page\n    - page_offset (int): number of entries to offset\n\nRaises: \n\n    - HTTPException (40X): If job can not be found\n\nReturns:\n\n    - list[json]",
          "operationId": "get_prots2prot_scores_ssp_single_site_get",
          "parameters": [
            {
              "required": true,
              "schema": { "title": "Job Id", "type": "string" },
              "name": "job_id",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Page Size",
                "maximum": 1000000.0,
                "minimum": 1.0,
                "type": "integer",
                "default": 10000
              },
              "name": "page_size",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Page Offset",
                "minimum": 0.0,
                "type": "integer",
                "default": 0
              },
              "name": "page_offset",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json5": {
                  "schema": { "$ref": "#/components/schemas/PoetJobDetails" }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "404": { "description": "Not found." },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
                }
              }
            }
          },
          "security": [{ "HTTPBase": [] }]
        },
        "post": {
          "tags": ["poet"],
          "summary": "Create Poet Ssp Scores",
          "description": "Create poet single site mutational scan. \n\nThis endpoint takes a user defined sequence and generates all single mutants with     natural amino acids (ARNDCQEGHILKMFPSTWYV).  \nThese mutants are then scored with poet (and a prompt). \n\nYou can supply a prompt in one of two ways:\n * from prompt_id (via /align/prompt or /align/upload_prompt).         This is the reccomended way. \n * from a parent_id of an existing Poet Job. \n\n---\n\nArgs: \n\n    - variant (str): target sequence to mutate and score (e.g. MQKLAAHA...)\n    - parent_id (str, optional): id for parent job.\n    - prompt_id (str, optional): if for a prompt job. \n\nRaises: \n\n    - HTTPException (40X): If job can not be created\n\nReturns:\n\n    - Job: submitted Job details\n---",
          "operationId": "create_poet_ssp_scores_single_site_post",
          "parameters": [
            {
              "required": true,
              "schema": { "title": "Variant", "type": "string" },
              "name": "variant",
              "in": "query"
            },
            {
              "required": false,
              "schema": { "title": "Prompt Id", "type": "string" },
              "name": "prompt_id",
              "in": "query"
            },
            {
              "required": false,
              "schema": { "title": "Parent Id", "type": "string" },
              "name": "parent_id",
              "in": "query"
            },
            {
              "required": false,
              "schema": { "title": "Mock", "type": "boolean", "default": false },
              "name": "mock",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json5": {
                  "schema": { "$ref": "#/components/schemas/Job" }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "404": { "description": "Not found." },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
                }
              }
            }
          },
          "security": [{ "HTTPBase": [] }]
        }
      },
      "/api/v1/poet/add_sequences": {
        "post": {
          "tags": ["poet"],
          "summary": "Add Poet Child",
          "description": "Add sequences to existing poet score job.\n\n---\n\nNote: will use all parent_id's prompt settings.\nNote, only for base poet, not single_site.\n\n\nCurrently supports CSV and Fa formats. \nFor CSV we expect a headerless upload including either:\n\n    * a 2 column file: Names, Sequences\n    * a 1 column file: Sequences\n---\n\nArgs: \n\n    - variant_file (File): either fasta or CSV (see above)\n    - parent_id (str): parent_id to append to (e.g. the job id of the original job)\n\nRaises:\n\n    - HTTPException (40X): If job can not be created\n\nReturns:\n\n    - Job: submitted Job details",
          "operationId": "add_poet_child_add_sequences_post",
          "parameters": [
            {
              "required": true,
              "schema": { "title": "Parent Id", "type": "string" },
              "name": "parent_id",
              "in": "query"
            },
            {
              "required": false,
              "schema": { "title": "Mock", "type": "boolean", "default": false },
              "name": "mock",
              "in": "query"
            }
          ],
          "requestBody": {
            "content": {
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Body_add_poet_child_add_sequences_post"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json5": {
                  "schema": { "$ref": "#/components/schemas/Job" }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "404": { "description": "Not found." },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
                }
              }
            }
          },
          "security": [{ "HTTPBase": [] }]
        }
      },
      "/api/v1/poet/generate": {
        "get": {
          "tags": ["poet"],
          "summary": "Get Generated Sequences",
          "description": "Stream scores and status for poet/generate jobs. \n\nYou can supply a parent_id to fetch all child job results. \nA child job is defined as a job created when \"adding\" sequences to a \"parent\"     via poet/add_generate\n\nReturns a SteamingResponse generator for lines in file.\n\n---\nArgs: \n\n    - job_id (str): job_id\n    - current_user (user): current user\n\nRaises: \n\n    - HTTPException (40X): If job can not be found\n\nReturns:\n\n    - encoded text\n---",
          "operationId": "get_generated_sequences_generate_get",
          "parameters": [
            {
              "required": false,
              "schema": { "title": "Job Id", "type": "string" },
              "name": "job_id",
              "in": "query"
            },
            {
              "required": false,
              "schema": { "title": "Parent Id", "type": "string" },
              "name": "parent_id",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Page Size",
                "maximum": 1000000.0,
                "minimum": 1.0,
                "type": "integer",
                "default": 10000
              },
              "name": "page_size",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Page Offset",
                "minimum": 0.0,
                "type": "integer",
                "default": 0
              },
              "name": "page_offset",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json5": {
                  "schema": { "$ref": "#/components/schemas/TextResponse" }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "404": { "description": "Not found." },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
                }
              }
            }
          },
          "security": [{ "HTTPBase": [] }]
        },
        "post": {
          "tags": ["poet"],
          "summary": "Generate Sequences",
          "description": "Generate novel sequences with poet.\n\nThe generate tool proposes new protein sequences by sampling from the distribution         over sequences defined by the PoET model with the given prompt. Sample number,             diversity, and quality can be controlled using the sampling parameters.\n\n---\n\nArgs: \n\n    - prompt_id (str): job_id from /align/prompt. \n    - generate_n (int, optional): number of sequences to generate. Defaults to 100.\n    - temperature (float, optional): Control randomness in amino acid selection at\n        each step. Lower temperature means less random. Defaults to 1.0.\n    - topk (int, optional):  Limit amino acids by K most confident at each step.\n        Smaller K means less random.\n    - topp (float, optional): Limit amino acids by cumulative probability threshold \n        at each step. Smaller P means less random.\n    - maxlen (int, optional): The maximum sequence length to sample. This can\n        sometimes speed up sampling if long sequences are not of interest.\n    - seed (int, optional): random seed for generation. Defaults to None.\n        Note that jobs with identical seeds (and params) will generate\n        identical sequences. \n    - mock (bool, optional): if True, do not submit job to queue. Defaults to False.\n\nRaises: \n\n    - HTTPException (40X): If job cannot be created\n\nReturns:\n\n    - Job: submitted Job details\n---",
          "operationId": "generate_sequences_generate_post",
          "parameters": [
            {
              "required": true,
              "schema": { "title": "Prompt Id", "type": "string" },
              "name": "prompt_id",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Generate N",
                "maximum": 1000.0,
                "minimum": 1.0,
                "type": "integer",
                "default": 100
              },
              "name": "generate_n",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Temperature",
                "maximum": 2.0,
                "minimum": 0.1,
                "type": "number",
                "default": 1.0
              },
              "name": "temperature",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Topk",
                "maximum": 20.0,
                "minimum": 1.0,
                "type": "integer",
                "default": 20
              },
              "name": "topk",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Topp",
                "maximum": 1.0,
                "minimum": 0.0,
                "type": "number",
                "default": 1.0
              },
              "name": "topp",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Maxlen",
                "maximum": 10000.0,
                "minimum": 5.0,
                "type": "integer",
                "default": 5000
              },
              "name": "maxlen",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Seed",
                "maximum": 4294967295.0,
                "minimum": 0.0,
                "type": "integer"
              },
              "name": "seed",
              "in": "query"
            },
            {
              "required": false,
              "schema": { "title": "Mock", "type": "boolean", "default": false },
              "name": "mock",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json5": {
                  "schema": { "$ref": "#/components/schemas/Job" }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "404": { "description": "Not found." },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
                }
              }
            }
          },
          "security": [{ "HTTPBase": [] }]
        }
      },
      "/api/v1/poet/add_generate": {
        "post": {
          "tags": ["poet"],
          "summary": "Add Generate Sequences",
          "description": "Add sequences to existing /poet/generate job. \n\nNote: will use all parent_id's prompt settings.\n\n---\n\nArgs: \n\n    - parent_id (str, optional): job_id from prior generate job.\n        inherits all params.\n    - generate_n (int, optional): number of additional sequences to generate.\n        Defaults to 10.\n\nRaises: \n\n    - HTTPException (40X): If job can not be created\n\nReturns:\n\n    - Job: submitted Job\n---",
          "operationId": "add_generate_sequences_add_generate_post",
          "parameters": [
            {
              "required": true,
              "schema": { "title": "Parent Id", "type": "string" },
              "name": "parent_id",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Generate N",
                "maximum": 1000.0,
                "minimum": 1.0,
                "type": "integer",
                "default": 10
              },
              "name": "generate_n",
              "in": "query"
            },
            {
              "required": false,
              "schema": { "title": "Mock", "type": "boolean", "default": false },
              "name": "mock",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json5": {
                  "schema": { "$ref": "#/components/schemas/Job" }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "404": { "description": "Not found." },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
                }
              }
            }
          },
          "security": [{ "HTTPBase": [] }]
        }
      },
      "/api/v1/poet/inputs": {
        "get": {
          "tags": ["poet"],
          "summary": "Get Variants",
          "description": "Get job inputs.\n\nStream the user input file from poet/score job creation. \n\n---\nArgs: \n\n    - job_id (str): job_id\n\nRaises: \n\n    - HTTPException (40X): If job can not be found\n\nReturns:\n\n    - StreamingResponse\n---",
          "operationId": "get_variants_inputs_get",
          "parameters": [
            {
              "required": true,
              "schema": { "title": "Job Id", "type": "string" },
              "name": "job_id",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json5": {
                  "schema": { "$ref": "#/components/schemas/InputsResponse" }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "404": { "description": "Not found." },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
                }
              }
            }
          },
          "security": [{ "HTTPBase": [] }]
        }
      },
      "/api/v1/poet/metadata": {
        "get": {
          "tags": ["poet"],
          "summary": "Get Poet Metadata",
          "description": "Get metadata for any poet job.\n\nMetadata will vary depending on type of job.\n\nYou can supply a parent_id to fetch all child jobs. \nA child job is defined as a job created when \"adding\" sequences to a \"parent\"     via poet/add_sequence (for poet/score) or a poet/add_generate (for poet/generate)\n\n---\nArgs: \n\n    - job_id (str): job_id. Exclusive with parent_id\n    - parent_id (str): parent job_id to return all results.\n\nRaises: \n\n    - HTTPException (40X): If job can not be found\n\nReturns:\n    - list json\n---",
          "operationId": "get_poet_metadata_metadata_get",
          "parameters": [
            {
              "required": false,
              "schema": { "title": "Job Id", "type": "string" },
              "name": "job_id",
              "in": "query"
            },
            {
              "required": false,
              "schema": { "title": "Parent Id", "type": "string" },
              "name": "parent_id",
              "in": "query"
            },
            {
              "required": false,
              "schema": { "$ref": "#/components/schemas/JobType" },
              "name": "job_type",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json5": {
                  "schema": {
                    "title": "Response Get Poet Metadata Metadata Get",
                    "type": "array",
                    "items": { "$ref": "#/components/schemas/Poetmetadatamulti" }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "404": { "description": "Not found." },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
                }
              }
            }
          },
          "security": [{ "HTTPBase": [] }]
        }
      },
      "/api/v1/poet/align/upload_prompt": {
        "post": {
          "tags": ["align"],
          "summary": "User Upload Prompt",
          "description": "Upload a pre-made prompt and bypass all MSA and Sampling criteria steps. \n\nThe number of replicates is determined by the number of prompts         included in the upload.\nEach individual prompt in the file should be seperated with `<END_PROMPT>` flags.\n\nCurrently supports CSV and Fa formats. \nFor CSV we expect a headerless upload including either:\n\n    * a 2 column file: Names, Sequences\n    * a 1 column file: Sequences\n\n---\n\nArgs: \n\n    - prompt_file (File): csv or fa file to use as prompt as-is\n\nRaises: \n\n    - HTTPException (40X): If job can not be created\n\n\nReturns: \n\n    - Job: submitted Job details\n---",
          "operationId": "user_upload_prompt_align_upload_prompt_post",
          "requestBody": {
            "content": {
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Body_user_upload_prompt_align_upload_prompt_post"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json5": {
                  "schema": { "$ref": "#/components/schemas/PromptJob" }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "404": { "description": "Not found." },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
                }
              }
            }
          },
          "security": [{ "HTTPBase": [] }]
        }
      },
      "/api/v1/poet/align/prompt": {
        "post": {
          "tags": ["align"],
          "summary": "Create Msa Sample",
          "description": "Creates a prompt from an existing MSA created from /align/msa endpoint. \n\nFiltering criteria (e.g. homology_level) are applied to the MSA to create a prompt        for use downstream use in poet applications.\n\nYou can and should view the results of this step with `/align/inputs msa_type='PROMPT'` before proceeding to poet endpoints.\n\n---\n\nArgs: \n\n    - msa_id (str): A job_id from POST /aign/msa results.\n    - max_msa_sequences (int): maximum number of sequences to sample from MSA. \n        Exclusive with max_msa_tokens.\n    - max_msa_tokens (int): maximum number of combined residues to sample from MSA.\n        Exclusive with max_msa_sequences.\n    - homology_level (float): The level of sequence identity used for sampling \n        non-redundant sequences from the MSA (neighbors sampling only).\n        For example, a homology level of 0.8 means that a sequence is considered to\n        belong to the same redundant group as other sequences to which it has >=80% identity.\n    - seed (int): seed for random sampling\n    - max_similarity (float): the max allowed similarity between the seed\n        and subsequent sequences from the MSA.\n    - min_similarity (float): the min allowed similarity between the seed\n        and subsequent sequences from the MSA.\n    - force_include_first (bool): whether to always include the seed (first)\n        sequence from the MSA\n    - msa_method (str): one of the following sampling strategies:\n        - Top: Select sequences in the order in which they occur in the MSA.\n        - Random: Sample sequences randomly without replacement from the MSA.\n        - Neighbors (reccomended): Sample more diverse, less redundant sequences \n            from the MSA by sampling each sequence with weight inversely \n            proportionalto its number of homologs in the MSA. \n            see homology_level for finer control of this strategy. \n    - replicates: the number of unique prompts to create. \n        Used to ensemble models downstream. \n\nRaises: \n\n    - HTTPException (40X): If job can not be created\n\nReturns: \n\n    - Job: submitted Job details\n---",
          "operationId": "create_msa_sample_align_prompt_post",
          "parameters": [
            {
              "required": false,
              "schema": { "title": "Msa Id", "type": "string" },
              "name": "msa_id",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Max Msa Sequences",
                "maximum": 99.0,
                "minimum": 1.0,
                "type": "integer"
              },
              "name": "max_msa_sequences",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Max Msa Tokens",
                "maximum": 24576.0,
                "minimum": 1.0,
                "type": "integer"
              },
              "name": "max_msa_tokens",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/MSASamplingStrategy" }],
                "default": "NEIGHBORS_NONGAP_NORM_NO_LIMIT"
              },
              "name": "msa_method",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Homology Level",
                "maximum": 1.0,
                "minimum": 0.0,
                "type": "number",
                "default": 0.8
              },
              "name": "homology_level",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Seed",
                "maximum": 4294967295.0,
                "minimum": 1.0,
                "type": "integer"
              },
              "name": "seed",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Max Similarity",
                "maximum": 1.0,
                "minimum": 0.0,
                "type": "number",
                "default": 1.0
              },
              "name": "max_similarity",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Min Similarity",
                "maximum": 1.0,
                "minimum": 0.0,
                "type": "number",
                "default": 0.0
              },
              "name": "min_similarity",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Force Include First",
                "type": "boolean",
                "default": false
              },
              "name": "force_include_first",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Replicates",
                "maximum": 15.0,
                "minimum": 1.0,
                "type": "integer",
                "default": 1
              },
              "name": "replicates",
              "in": "query"
            },
            {
              "required": false,
              "schema": { "title": "Mock", "type": "boolean", "default": false },
              "name": "mock",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json5": {
                  "schema": { "$ref": "#/components/schemas/PromptJob" }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "404": { "description": "Not found." },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
                }
              }
            }
          },
          "security": [{ "HTTPBase": [] }]
        }
      },
      "/api/v1/poet/align/msa": {
        "get": {
          "tags": ["align"],
          "summary": "Get MSAs (raw, generated, prompt) where available",
          "description": "Get MSA and prompts created by align/msa, align/prompt or align/upload_prompt.\n\nSet replicate to None to fetch all available replicates. \n\n---\nArgs: \n\n    - job_id (str): job_id\n    - msa_type (MSAType): One of the following:\n        - RAW: user uploaded file or seed. \n        - GENERATED: MSA from ColabFold (or User upload)\n        - PROMPT: returns the sub-sample of MSA used for poet (if available)\n    - replicate (int): the replicate to return, only applied to msa_type=PROMPT. \n\nRaises: \n\n    - HTTPException (40X): If job can not be found\n\nReturns:\n    - List(jsons)\n---",
          "operationId": "get_msa_inputs_align_msa_get",
          "parameters": [
            {
              "required": true,
              "schema": { "title": "Job Id", "type": "string" },
              "name": "job_id",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "allOf": [{ "$ref": "#/components/schemas/MSAType" }],
                "default": "GENERATED"
              },
              "name": "msa_type",
              "in": "query"
            },
            {
              "required": false,
              "schema": { "title": "Replicate", "type": "integer" },
              "name": "replicate",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json5": {
                  "schema": { "$ref": "#/components/schemas/InputsResponse" }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "404": { "description": "Not found." },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
                }
              }
            }
          },
          "security": [{ "HTTPBase": [] }]
        },
        "post": {
          "tags": ["align"],
          "summary": "Create Msa Job",
          "description": "Create a multiple sequence alignment (MSA). \n\nEither upload a seed sequence (is_seed = True) to have ColabFold generate an MSA,         or upload an entire, pre-made MSA directly (is_seed = False).\n\nCurrently supports CSV and Fa formats. \nFor CSV we expect a headerless upload including either:\n\n    * a 2 column file: Names, Sequences\n    * a 1 column file: Sequences\n\nArgs: \n\n    - msa (File): CSV or Fa (see above)\n    - is_seed (bool): whether to use the first sequence as a seed for the MSA. \n        Note that if True, everything past the first sequence is discarded. \n\nRaises: \n\n    - HTTPException (40X): If job can not be created\n\nReturns: \n\n    - Job: submitted Job details\n---",
          "operationId": "create_msa_job_align_msa_post",
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Is Seed",
                "type": "boolean",
                "default": true
              },
              "name": "is_seed",
              "in": "query"
            }
          ],
          "requestBody": {
            "content": {
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Body_create_msa_job_align_msa_post"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json5": {
                  "schema": { "$ref": "#/components/schemas/AlignJob" }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "404": { "description": "Not found." },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
                }
              }
            }
          },
          "security": [{ "HTTPBase": [] }]
        }
      },
      "/api/v1/poet/align/metadata": {
        "get": {
          "tags": ["align"],
          "summary": "Get Metadata",
          "description": "Get metadata for MSA and prompts. \n \nMSA and prompts are created by align/msa & align/prompt or align/upload_prompt.\n\nSet replicate to None to fetch all available replicates. \n\n---\nArgs: \n\n    - job_id (str): job_id\n    - msa_type (MSAType): One of the following:\n        - RAW: user uploaded file\n        - GENERATED: MSA from ColabFold (or User upload)\n        - PROMPT: returns the sub-sample of MSA used for poet (if available)\n    - replicate (int): the replicate to return, only applied to msa_type=PROMPT. \n\nRaises: \n\n    - HTTPException (40X): If job can not be found\n\nReturns:\n    - List(jsons)\n---",
          "operationId": "get_metadata_align_metadata_get",
          "parameters": [
            {
              "required": true,
              "schema": { "title": "Job Id", "type": "string" },
              "name": "job_id",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Msa Type",
                "anyOf": [
                  { "$ref": "#/components/schemas/MSAType" },
                  { "type": "string" }
                ],
                "default": "RAW"
              },
              "name": "msa_type",
              "in": "query"
            },
            {
              "required": false,
              "schema": { "title": "Replicate", "type": "integer" },
              "name": "replicate",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json5": {
                  "schema": {
                    "title": "Response Get Metadata Align Metadata Get",
                    "type": "array",
                    "items": { "$ref": "#/components/schemas/MSAMetadata" }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "404": { "description": "Not found." },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
                }
              }
            }
          },
          "security": [{ "HTTPBase": [] }]
        }
      },
      "/api/v1/poet/align/jobs_by_prompt": {
        "get": {
          "tags": ["align"],
          "summary": "Get Jobs By Prompt",
          "description": "Fetch any jobs assoicated with a prompt id.\n\n---\n\nArgs: \n\n    - prompt_id (str): prompt_id\n    - job_type (JobType, optional): job type. Defaults to None.\n    - job_status (JobStatus, optional): job status. Defaults to None.\n\nRaises: \n\n    - HTTPException (40X): If job can not be found\n\nReturns:\n\n    - List[Job]: list of jobs\n---",
          "operationId": "get_jobs_by_prompt_align_jobs_by_prompt_get",
          "parameters": [
            {
              "required": true,
              "schema": { "title": "Prompt Id", "type": "string" },
              "name": "prompt_id",
              "in": "query"
            },
            {
              "required": false,
              "schema": { "$ref": "#/components/schemas/JobType" },
              "name": "job_type",
              "in": "query"
            },
            {
              "required": false,
              "schema": { "$ref": "#/components/schemas/JobStatus" },
              "name": "job_status",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json5": {
                  "schema": {
                    "title": "Response Get Jobs By Prompt Align Jobs By Prompt Get",
                    "type": "array",
                    "items": { "$ref": "#/components/schemas/PoetJob" }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "404": { "description": "Not found." },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
                }
              }
            }
          },
          "security": [{ "HTTPBase": [] }]
        }
      },
      "/api/v1/poet/align/jobs_by_msa": {
        "get": {
          "tags": ["align"],
          "summary": "Get Jobs By Msa",
          "description": "Fetch any jobs assoicated with a msa id.\n\n---\n\nArgs: \n\n    - msa_id (str): prompt_id\n    - job_type (JobType, optional): job type. Defaults to None.\n    - job_status (JobStatus, optional): job status. Defaults to None.\n\nRaises: \n\n    - HTTPException (40X): If job can not be found\n\nReturns:\n\n    - List[Job]: list of jobs\n---",
          "operationId": "get_jobs_by_msa_align_jobs_by_msa_get",
          "parameters": [
            {
              "required": true,
              "schema": { "title": "Msa Id", "type": "string" },
              "name": "msa_id",
              "in": "query"
            },
            {
              "required": false,
              "schema": { "$ref": "#/components/schemas/JobType" },
              "name": "job_type",
              "in": "query"
            },
            {
              "required": false,
              "schema": { "$ref": "#/components/schemas/JobStatus" },
              "name": "job_status",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json5": {
                  "schema": {
                    "title": "Response Get Jobs By Msa Align Jobs By Msa Get",
                    "type": "array",
                    "items": { "$ref": "#/components/schemas/PoetJob" }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json5": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPExceptionResponse"
                  }
                }
              }
            },
            "404": { "description": "Not found." },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
                }
              }
            }
          },
          "security": [{ "HTTPBase": [] }]
        }
      }
    },
    "components": {
      "schemas": {
        "AlignJob": {
          "title": "AlignJob",
          "required": ["status", "created_date", "job_type"],
          "type": "object",
          "properties": {
            "status": { "$ref": "#/components/schemas/JobStatus" },
            "job_id": { "title": "Job Id", "type": "string" },
            "created_date": {
              "title": "Created Date",
              "type": "string",
              "format": "date-time"
            },
            "job_type": { "$ref": "#/components/schemas/JobType" },
            "start_date": {
              "title": "Start Date",
              "type": "string",
              "format": "date-time"
            },
            "end_date": {
              "title": "End Date",
              "type": "string",
              "format": "date-time"
            },
            "prerequisite_job_id": {
              "title": "Prerequisite Job Id",
              "type": "string"
            },
            "progress_message": { "title": "Progress Message", "type": "string" },
            "progress_counter": {
              "title": "Progress Counter",
              "type": "integer"
            },
            "msa_id": { "title": "Msa Id", "type": "string" }
          },
          "description": "Properties returned about job via API."
        },
        "Body_add_poet_child_add_sequences_post": {
          "title": "Body_add_poet_child_add_sequences_post",
          "required": ["variant_file"],
          "type": "object",
          "properties": {
            "variant_file": {
              "title": "Variant File",
              "type": "string",
              "format": "binary"
            }
          }
        },
        "Body_create_msa_job_align_msa_post": {
          "title": "Body_create_msa_job_align_msa_post",
          "required": ["msa_file"],
          "type": "object",
          "properties": {
            "msa_file": {
              "title": "Msa File",
              "type": "string",
              "format": "binary"
            }
          }
        },
        "Body_create_poet_scores_score_post": {
          "title": "Body_create_poet_scores_score_post",
          "required": ["variant_file"],
          "type": "object",
          "properties": {
            "variant_file": {
              "title": "Variant File",
              "type": "string",
              "format": "binary"
            }
          }
        },
        "Body_user_upload_prompt_align_upload_prompt_post": {
          "title": "Body_user_upload_prompt_align_upload_prompt_post",
          "required": ["prompt_file"],
          "type": "object",
          "properties": {
            "prompt_file": {
              "title": "Prompt File",
              "type": "string",
              "format": "binary"
            }
          }
        },
        "HTTPExceptionResponse": {
          "title": "HTTPExceptionResponse",
          "required": ["detail"],
          "type": "object",
          "properties": { "detail": { "title": "Detail", "type": "string" } },
          "description": "Standard HTTP response."
        },
        "HTTPValidationError": {
          "title": "HTTPValidationError",
          "type": "object",
          "properties": {
            "detail": {
              "title": "Detail",
              "type": "array",
              "items": { "$ref": "#/components/schemas/ValidationError" }
            }
          }
        },
        "InputsResponse": {
          "title": "InputsResponse",
          "type": "object",
          "properties": {
            "media_type": {
              "title": "Media Type",
              "type": "string",
              "default": "application/octet-stream"
            },
            "content": {
              "title": "Content",
              "type": "string",
              "default": "sequence-1,AAAAA\nsequence-1,HHHHHH\n"
            }
          },
          "description": "All purpose text response schema."
        },
        "Job": {
          "title": "Job",
          "required": ["status", "created_date", "job_type"],
          "type": "object",
          "properties": {
            "status": { "$ref": "#/components/schemas/JobStatus" },
            "job_id": { "title": "Job Id", "type": "string" },
            "created_date": {
              "title": "Created Date",
              "type": "string",
              "format": "date-time"
            },
            "job_type": { "$ref": "#/components/schemas/JobType" },
            "start_date": {
              "title": "Start Date",
              "type": "string",
              "format": "date-time"
            },
            "end_date": {
              "title": "End Date",
              "type": "string",
              "format": "date-time"
            },
            "prerequisite_job_id": {
              "title": "Prerequisite Job Id",
              "type": "string"
            },
            "progress_message": { "title": "Progress Message", "type": "string" },
            "progress_counter": { "title": "Progress Counter", "type": "integer" }
          },
          "description": "Properties returned about job via API."
        },
        "JobStatus": {
          "title": "JobStatus",
          "enum": [
            "PENDING",
            "RETRYING",
            "RUNNING",
            "SUCCESS",
            "FAILURE",
            "CANCELED"
          ],
          "type": "string",
          "description": "Status type for job.\n\nDescribes the current status of a job."
        },
        "JobType": {
          "title": "JobType",
          "enum": [
            "/workflow/preprocess",
            "/workflow/train",
            "/workflow/embed/umap",
            "/workflow/predict",
            "/workflow/predict/single_site",
            "/workflow/crossvalidate",
            "/workflow/evaluate",
            "/workflow/design",
            "/align/align",
            "/align/prompt",
            "/poet",
            "/poet/single_site",
            "/poet/generate",
            "/embeddings/embed",
            "/embeddings/svd",
            "/embeddings/attn",
            "/embeddings/logits"
          ],
          "type": "string",
          "description": "Type of job.\n\nDescribes the types of jobs that can be done."
        },
        "MSAGeneratedMetaData": {
          "title": "MSAGeneratedMetaData",
          "required": ["metadata"],
          "type": "object",
          "properties": {
            "filename": {
              "title": "Filename",
              "type": "string",
              "default": "blob"
            },
            "max_sequence_length": {
              "title": "Max Sequence Length",
              "type": "integer",
              "default": 0
            },
            "min_sequence_length": {
              "title": "Min Sequence Length",
              "type": "integer",
              "default": 0
            },
            "n_sequences": {
              "title": "N Sequences",
              "type": "integer",
              "default": 0
            },
            "metadata": {
              "title": "Metadata",
              "enum": ["GENERATED"],
              "type": "string"
            }
          },
          "description": "MSA GENERATED response schema."
        },
        "MSAMetadata": {
          "title": "MSAMetadata",
          "anyOf": [
            { "$ref": "#/components/schemas/MSAGeneratedMetaData" },
            { "$ref": "#/components/schemas/MSASampledMetaData" },
            { "$ref": "#/components/schemas/MSARawMetaData" }
          ],
          "description": "Metadata for MSA."
        },
        "MSARawMetaData": {
          "title": "MSARawMetaData",
          "required": ["metadata"],
          "type": "object",
          "properties": {
            "filename": {
              "title": "Filename",
              "type": "string",
              "default": "blob"
            },
            "max_sequence_length": {
              "title": "Max Sequence Length",
              "type": "integer",
              "default": 0
            },
            "min_sequence_length": {
              "title": "Min Sequence Length",
              "type": "integer",
              "default": 0
            },
            "n_sequences": {
              "title": "N Sequences",
              "type": "integer",
              "default": 0
            },
            "metadata": {
              "title": "Metadata",
              "enum": ["RAW"],
              "type": "string"
            },
            "isseed": { "title": "Isseed", "type": "boolean", "default": false }
          },
          "description": "MSA RAW response schema."
        },
        "MSASampledMetaData": {
          "title": "MSASampledMetaData",
          "required": ["metadata"],
          "type": "object",
          "properties": {
            "filename": {
              "title": "Filename",
              "type": "string",
              "default": "blob"
            },
            "max_sequence_length": {
              "title": "Max Sequence Length",
              "type": "integer",
              "default": 0
            },
            "min_sequence_length": {
              "title": "Min Sequence Length",
              "type": "integer",
              "default": 0
            },
            "n_sequences": {
              "title": "N Sequences",
              "type": "integer",
              "default": 0
            },
            "metadata": {
              "title": "Metadata",
              "enum": ["PROMPT"],
              "type": "string"
            },
            "max_msa_sequences": {
              "title": "Max Msa Sequences",
              "type": "integer"
            },
            "msa_method": { "$ref": "#/components/schemas/MSASamplingStrategy" },
            "homology_level": { "title": "Homology Level", "type": "number" },
            "seed": { "title": "Seed", "type": "integer" },
            "replicate": {
              "title": "Replicate",
              "type": "integer",
              "default": 0
            },
            "force_include_first": {
              "title": "Force Include First",
              "type": "boolean",
              "default": false
            },
            "max_similarity": { "title": "Max Similarity", "type": "number" },
            "min_similarity": { "title": "Min Similarity", "type": "number" },
            "max_msa_tokens": { "title": "Max Msa Tokens", "type": "integer" },
            "replicates": { "title": "Replicates", "type": "integer" }
          },
          "description": "MSA PROMPT response schema."
        },
        "MSASamplingStrategy": {
          "title": "MSASamplingStrategy",
          "enum": [
            "RANDOM",
            "NEIGHBORS",
            "NEIGHBORS_NO_LIMIT",
            "NEIGHBORS_NONGAP_NORM_NO_LIMIT",
            "TOP",
            "CUSTOM"
          ],
          "type": "string",
          "description": "MSA Sampling Strategy. Will downsample to max_msa_sequences.\n\nmax_msa_sequences is set elsewhere"
        },
        "MSAType": {
          "title": "MSAType",
          "enum": ["RAW", "GENERATED", "PROMPT"],
          "type": "string",
          "description": "Status type for MSA.\n\nDescribes the status of a MSA."
        },
        "PoetJob": {
          "title": "PoetJob",
          "required": ["status", "created_date", "job_type"],
          "type": "object",
          "properties": {
            "status": { "$ref": "#/components/schemas/JobStatus" },
            "job_id": { "title": "Job Id", "type": "string" },
            "created_date": {
              "title": "Created Date",
              "type": "string",
              "format": "date-time"
            },
            "job_type": { "$ref": "#/components/schemas/JobType" },
            "start_date": {
              "title": "Start Date",
              "type": "string",
              "format": "date-time"
            },
            "end_date": {
              "title": "End Date",
              "type": "string",
              "format": "date-time"
            },
            "prerequisite_job_id": {
              "title": "Prerequisite Job Id",
              "type": "string"
            },
            "progress_message": { "title": "Progress Message", "type": "string" },
            "progress_counter": {
              "title": "Progress Counter",
              "type": "integer"
            },
            "parent_id": { "title": "Parent Id", "type": "string" },
            "n_variants": { "title": "N Variants", "type": "integer" },
            "prompt_id": { "title": "Prompt Id", "type": "string" },
            "root_msa": { "title": "Root Msa", "type": "string" }
          },
          "description": "Properties returned about job via API."
        },
        "PoetJobDetails": {
          "title": "PoetJobDetails",
          "required": [
            "job_type",
            "status",
            "page_size",
            "page_offset",
            "created_date"
          ],
          "type": "object",
          "properties": {
            "job_id": { "title": "Job Id", "type": "string" },
            "job_type": { "$ref": "#/components/schemas/JobType" },
            "status": { "$ref": "#/components/schemas/JobStatus" },
            "parent_id": { "title": "Parent Id", "type": "string" },
            "page_size": { "title": "Page Size", "type": "integer" },
            "page_offset": { "title": "Page Offset", "type": "integer" },
            "num_rows": { "title": "Num Rows", "type": "integer", "default": 0 },
            "created_date": {
              "title": "Created Date",
              "type": "string",
              "format": "date-time"
            },
            "start_date": {
              "title": "Start Date",
              "type": "string",
              "format": "date-time"
            },
            "end_date": {
              "title": "End Date",
              "type": "string",
              "format": "date-time"
            },
            "result": {
              "title": "Result",
              "type": "array",
              "items": { "$ref": "#/components/schemas/SequencePrediction" }
            }
          },
          "description": "Properties about prots2prot job returned via API."
        },
        "PoetSSPmetadata": {
          "title": "PoetSSPmetadata",
          "required": ["metadata"],
          "type": "object",
          "properties": {
            "metadata": {
              "title": "Metadata",
              "enum": ["/poet/single_site"],
              "type": "string"
            },
            "filename": {
              "title": "Filename",
              "type": "string",
              "default": "blob"
            },
            "max_sequence_length": {
              "title": "Max Sequence Length",
              "type": "integer",
              "default": 0
            },
            "min_sequence_length": {
              "title": "Min Sequence Length",
              "type": "integer",
              "default": 0
            },
            "n_sequences": {
              "title": "N Sequences",
              "type": "integer",
              "default": 0
            },
            "job_id": { "title": "Job Id", "type": "string" },
            "base_sequence": { "title": "Base Sequence", "type": "string" }
          },
          "description": "Metadata properties for MSA and prots2prot."
        },
        "Poetgeneratemetadata": {
          "title": "Poetgeneratemetadata",
          "required": ["metadata"],
          "type": "object",
          "properties": {
            "metadata": {
              "title": "Metadata",
              "enum": ["/poet/generate"],
              "type": "string"
            },
            "temperature": { "title": "Temperature", "type": "number" },
            "maximum_generated_length": {
              "title": "Maximum Generated Length",
              "type": "integer"
            },
            "topp": { "title": "Topp", "type": "number" },
            "topk": { "title": "Topk", "type": "integer" },
            "nsample": { "title": "Nsample", "type": "integer" },
            "prompt_id": { "title": "Prompt Id", "type": "string" },
            "gen_seed": { "title": "Gen Seed", "type": "integer" },
            "job_id": { "title": "Job Id", "type": "string" }
          },
          "description": "Metadata properties for MSA and poet."
        },
        "Poetmetadata": {
          "title": "Poetmetadata",
          "required": ["metadata"],
          "type": "object",
          "properties": {
            "metadata": {
              "title": "Metadata",
              "enum": ["/poet"],
              "type": "string"
            },
            "filename": {
              "title": "Filename",
              "type": "string",
              "default": "blob"
            },
            "max_sequence_length": {
              "title": "Max Sequence Length",
              "type": "integer",
              "default": 0
            },
            "min_sequence_length": {
              "title": "Min Sequence Length",
              "type": "integer",
              "default": 0
            },
            "n_sequences": {
              "title": "N Sequences",
              "type": "integer",
              "default": 0
            },
            "job_id": { "title": "Job Id", "type": "string" }
          },
          "description": "Metadata properties for MSA and poet."
        },
        "Poetmetadatamulti": {
          "title": "Poetmetadatamulti",
          "oneOf": [
            { "$ref": "#/components/schemas/Poetmetadata" },
            { "$ref": "#/components/schemas/Poetgeneratemetadata" },
            { "$ref": "#/components/schemas/PoetSSPmetadata" }
          ],
          "description": "Metadata for p2p.",
          "discriminator": {
            "propertyName": "metadata",
            "mapping": {
              "/poet": "#/components/schemas/Poetmetadata",
              "/poet/generate": "#/components/schemas/Poetgeneratemetadata",
              "/poet/single_site": "#/components/schemas/PoetSSPmetadata"
            }
          }
        },
        "PromptJob": {
          "title": "PromptJob",
          "required": ["status", "created_date", "job_type"],
          "type": "object",
          "properties": {
            "status": { "$ref": "#/components/schemas/JobStatus" },
            "job_id": { "title": "Job Id", "type": "string" },
            "created_date": {
              "title": "Created Date",
              "type": "string",
              "format": "date-time"
            },
            "job_type": { "$ref": "#/components/schemas/JobType" },
            "start_date": {
              "title": "Start Date",
              "type": "string",
              "format": "date-time"
            },
            "end_date": {
              "title": "End Date",
              "type": "string",
              "format": "date-time"
            },
            "prerequisite_job_id": {
              "title": "Prerequisite Job Id",
              "type": "string"
            },
            "progress_message": { "title": "Progress Message", "type": "string" },
            "progress_counter": {
              "title": "Progress Counter",
              "type": "integer"
            },
            "prompt_id": { "title": "Prompt Id", "type": "string" }
          },
          "description": "Properties returned about job via API."
        },
        "SequencePrediction": {
          "title": "SequencePrediction",
          "required": ["sequence", "score"],
          "type": "object",
          "properties": {
            "sequence": { "title": "Sequence", "type": "string" },
            "score": {
              "title": "Score",
              "type": "array",
              "items": { "type": "number" }
            },
            "name": { "title": "Name", "type": "string" }
          },
          "description": "Sequence prediction."
        },
        "TextResponse": {
          "title": "TextResponse",
          "type": "object",
          "properties": {
            "media_type": {
              "title": "Media Type",
              "type": "string",
              "default": "application/octet-stream"
            }
          },
          "description": "All purpose text response schema."
        },
        "ValidationError": {
          "title": "ValidationError",
          "required": ["loc", "msg", "type"],
          "type": "object",
          "properties": {
            "loc": {
              "title": "Location",
              "type": "array",
              "items": { "anyOf": [{ "type": "string" }, { "type": "integer" }] }
            },
            "msg": { "title": "Message", "type": "string" },
            "type": { "title": "Error Type", "type": "string" }
          }
        }
      },
      "securitySchemes": {
        "HTTPBase": {
          "type": "oauth2",
          "flows": {
            "password": { "scopes": {}, "tokenUrl": "/api/v1/login/access-token" }
          }
        }
      }
    },
    "tags": [
      {
        "name": "align",
        "description": "Create MSAs and prompts for use with PoET!"
      },
      {
        "name": "poet",
        "description": "Protein Evolutionary Transformer (PoET): a generative protein language model with evolutionary prompting!"
      }
    ]
  }
  